datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String?
  firstName   String
  lastName    String
  hashPassword String
  reviews     Review[]
  likedBy     Like[] 
  imageUrl   String?  
  comments Comment[] 
  ratings     Rating[] 
  userType    UserType @default(USER)
  status      String   @default("active") 
  sentMessages   Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  bookmarks  Bookmark[] @relation("UserBookmarks")
  @@map("users")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  timestamp DateTime @default(now())

  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  Int

  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
}

enum UserType {
  USER
  ADMIN
}

model Review {
  id         Int      @id @default(autoincrement())
  name       String
  groupName  String 
  tags       Tag[]
  reviewText String
  imageUrl   String?  
  ratings    Rating[]
  grade  Float      @default(0)
  isLiked    Boolean    @default(false) 
  likes      Like[]
  createdAt  DateTime  @default(now())
  comments Comment[] 
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  bookmarks  Bookmark[] @relation("ReviewBookmarks")
}

model Rating {
  id       Int    @id @default(autoincrement())
  ratingNum   Int
  reviewId Int
  userId   Int
  review   Review @relation(fields: [reviewId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
  @@unique([reviewId, userId])
}

model Like {
  id            Int      @id @default(autoincrement())
  userId        Int
  reviewId      Int
  user          User     @relation(fields: [userId], references: [id])
  review        Review   @relation(fields: [reviewId], references: [id])
  @@unique([userId, reviewId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  text      String
  userId    Int
  reviewId  Int
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  review    Review    @relation(fields: [reviewId], references: [id])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  reviews Review[]
}

model Bookmark {
  id          Int       @id @default(autoincrement())
  userId      Int       
  reviewId    Int       
  createdAt   DateTime  @default(now())
  
  user        User      @relation("UserBookmarks", fields: [userId], references: [id])
  
  review      Review    @relation("ReviewBookmarks", fields: [reviewId], references: [id])
  
  @@unique([userId, reviewId])
}